{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DemoForm","state","json","eventType","DataPlanMatchType","CustomEvent","language","content","handleClick","currentLanguage","MPSnippets","translateDataPlanJSON","JSON","parse","e","console","error","setState","handleLanguageChange","event","target","value","handleJSONChange","src","width","alt","rel","className","href","Form","Group","Field","label","control","this","onChange","widths","height","placeholder","mode","theme","name","onLoad","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","readOnly","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.383af984.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Form } from 'semantic-ui-react';\nimport './App.css';\nimport 'jsoneditor-react/es/editor.min.css';\n\nimport { MPSnippets } from '@mparticle/data-planning-snippets';\nimport { DataPlanMatchType } from '@mparticle/data-planning-models';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/webpack-resolver'\nimport 'ace-builds/src-noconflict/ext-language_tools';\nimport 'ace-builds/src-noconflict/mode-json';\nimport 'ace-builds/src-noconflict/theme-monokai';\n\nfunction App() {\n    return (\n        <div className=\"wrapper\">\n            <DemoForm />\n        </div>\n    );\n}\n\nclass DemoForm extends Component {\n    state = {\n        json: '',\n        eventType: DataPlanMatchType.CustomEvent,\n        language: 'swift',\n        content: '',\n    };\n\n    handleClick = () => {\n        const { language, json } = this.state;\n        var currentLanguage = 1;\n        if (language === 'swift') {\n            currentLanguage = 2;\n        } else if (language === 'objC') {\n            currentLanguage = 3;\n        } else if (language === 'kotlin') {\n            currentLanguage = 4;\n        } else if (language === 'java') {\n            currentLanguage = 5;\n        } else if (language === 'javascript') {\n            currentLanguage = 6;\n        }\n\n        var content;\n        try {\n            content = MPSnippets.translateDataPlanJSON(\n                JSON.parse(json),\n                currentLanguage\n            );\n        } catch (e) {\n            content = 'There is something wrong with your JSON';\n            console.error(e);\n        }\n\n        this.setState(state => ({\n            content,\n        }));\n    };\n\n    handleLanguageChange = event => {\n        this.setState({ language: event.target.value }, () => {\n            this.handleClick();\n        });\n    };\n\n    handleJSONChange = (value, event) => {\n        this.setState({ json: value }, () => {\n            this.handleClick();\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <div>\n                        <img\n                            src=\"https://static.mparticle.com/sdk/mp_logo_black.svg\"\n                            width={280}\n                            alt=\"mParticle\"\n                            rel=\"noopener noreferrer\"\n                        />\n                        <a\n                            className=\"github\"\n                            href=\"https://github.com/mParticle/data-planning-snippets\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <img\n                                src=\"https://github.githubassets.com/images/modules/logos_page/Octocat.png\"\n                                width={150}\n                                alt=\"Checkout our repository on Github\"\n                            />\n                        </a>\n                        <p />\n                        <p>The mParticle Snippets tool generates working code blocks that log events using the mParticle SDKs in a way that conforms to a data plan.</p>\n                        <p>To use the Snippets tool:</p>\n                        <ol>\n                          <li>Copy the raw JSON from your data plan and paste it in the left column.</li>\n                          <li>Select the appropriate language for your app and the mParticle SDK you are using with the language dropdown menu.</li>\n                          <li>Use the generated code blocks that appear in the right column to correctly log events from your app.</li>\n                        </ol>\n                        <p>For an example with detailed instructions, visit mParticle Snippets Tool in mParticle\\â€™s developer documentation.</p>\n                    </div>\n                    <div>\n                        <a\n                            className=\"icons\"\n                            href=\"https://www.npmjs.com/package/@mparticle/data-planning-snippets\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <img\n                                className=\"mr\"\n                                alt=\"shields.io badge\"\n                                src=\"https://img.shields.io/npm/v/@mparticle/data-planning-snippets.svg?maxAge=2592000\"\n                            />\n                        </a>\n                        <a\n                            className=\"icons\"\n                            href=\"https://travis-ci.com/mParticle/data-planning-snippets\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <img\n                                className=\"mr\"\n                                alt=\"travis ci badge\"\n                                src=\"https://travis-ci.com/mParticle/data-planning-snippets.svg?branch=master\"\n                            />\n                        </a>\n                    </div>\n                </div>\n                <Form className=\"form\">\n                    <Form.Group>\n                        <Form.Field\n                            label=\"Please select a language\"\n                            control=\"select\"\n                            value={this.state.language}\n                            onChange={e => this.handleLanguageChange(e)}\n                        >\n                            <option value=\"json\">JSON</option>\n                            <option value=\"swift\">Apple SDK (Swift)</option>\n                            <option value=\"objC\">Apple SDK (Obj-C)</option>\n                            <option value=\"kotlin\">Android SDK (Kotlin)</option>\n                            <option value=\"java\">Android SDK (Java)</option>\n                            <option value=\"javascript\">Web SDK</option>\n                        </Form.Field>\n                    </Form.Group>\n                    <Form.Group widths=\"equal\">\n                        <AceEditor\n                            className=\"jsonEditor\"\n                            width=\"50%\"\n                            height=\"800px\"\n                            placeholder=\"Paste your Data Plan JSON here\"\n                            mode=\"json\"\n                            theme=\"monokai\"\n                            name=\"blah1\"\n                            onLoad={this.onLoad}\n                            onChange={(value, event) =>\n                                this.handleJSONChange(value, event)\n                            }\n                            fontSize={14}\n                            showPrintMargin={false}\n                            showGutter={true}\n                            highlightActiveLine={true}\n                            value={this.state.json}\n                            setOptions={{\n                                enableBasicAutocompletion: false,\n                                enableLiveAutocompletion: false,\n                                enableSnippets: false,\n                                showLineNumbers: true,\n                                tabSize: 2,\n                            }}\n                        />\n                        <AceEditor\n                            className=\"jsonEditor\"\n                            width=\"50%\"\n                            height=\"800px\"\n                            placeholder=\"Example code will appear here\"\n                            mode=\"json\"\n                            theme=\"monokai\"\n                            name=\"blah2\"\n                            readOnly={true}\n                            onLoad={this.onLoad}\n                            onChange={this.onChange}\n                            fontSize={14}\n                            showPrintMargin={false}\n                            showGutter={true}\n                            highlightActiveLine={true}\n                            value={this.state.content}\n                            setOptions={{\n                                enableBasicAutocompletion: false,\n                                enableLiveAutocompletion: false,\n                                enableSnippets: false,\n                                showLineNumbers: true,\n                                tabSize: 2,\n                            }}\n                        />\n                    </Form.Group>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}