{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DemoForm","state","json","eventType","DataPlanMatchType","CustomEvent","language","content","handleClick","currentLanguage","MPSnippets","translateDataPlanJSON","JSON","parse","e","console","log","setState","handleLanguageChange","event","target","value","handleJSONChange","src","width","alt","className","href","Form","Group","Field","label","control","this","onChange","widths","height","placeholder","mode","theme","name","onLoad","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","readOnly","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8aAmBMA,E,2MACJC,MAAQ,CACNC,KAAM,GACNC,UAAWC,oBAAkBC,YAC7BC,SAAU,QACVC,QAAS,I,EAGXC,YAAc,WAAO,IAefD,EAfc,EACS,EAAKN,MAAxBK,EADU,EACVA,SAAUJ,EADA,EACAA,KACdO,EAAkB,EACL,UAAbH,EACFG,EAAkB,EACI,SAAbH,EACTG,EAAkB,EACI,WAAbH,EACTG,EAAkB,EACI,SAAbH,EACTG,EAAkB,EACI,eAAbH,IACTG,EAAkB,GAIpB,IACEF,EAAUG,aAAWC,sBAAsBC,KAAKC,MAAMX,GAAOO,GAC7D,MAAOK,GACPP,EAAU,0CACVQ,QAAQC,IAAIF,GAEdC,QAAQC,IAAIT,GAEZ,EAAKU,UAAS,SAAAhB,GAAK,MAAK,CACtBM,e,EAIJW,qBAAuB,SAACC,GACtB,EAAKF,SAAS,CAAEX,SAAUa,EAAMC,OAAOC,QAAS,WAC9C,EAAKb,kB,EAITc,iBAAmB,SAACD,EAAOF,GACzB,EAAKF,SAAS,CAAEf,KAAMmB,IAAS,WAC7B,EAAKb,kB,wEAIC,IAAD,OACP,OACE,6BACE,6BACE,6BACE,yBAAKe,IAAI,qDAAqDC,MAAO,IAAKC,IAAI,cAC9E,uBAAGC,UAAU,SAASC,KAAK,sDAAsDP,OAAO,UACtF,yBAAKG,IAAI,wEAAwEC,MAAO,IAAKC,IAAI,uCAEnG,4BALF,yJAQA,6BACE,uBAAGC,UAAU,QAAQC,KAAK,kEAAkEP,OAAO,UACjG,yBAAKM,UAAU,KAAKH,IAAI,uFAE1B,uBAAGG,UAAU,QAAQC,KAAK,yDAAyDP,OAAO,UACxF,yBAAKM,UAAU,KAAKH,IAAI,gFAI9B,kBAACK,EAAA,EAAD,CAAMF,UAAU,QACd,kBAACE,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYC,MAAM,2BAA2BC,QAAQ,SAASX,MAAOY,KAAKhC,MAAMK,SAAU4B,SAAU,SAACpB,GAAD,OAAO,EAAKI,qBAAqBJ,KACnI,4BAAQO,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,eACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,cAAd,gBAGJ,kBAACO,EAAA,EAAKC,MAAN,CAAYM,OAAO,SACjB,kBAAC,IAAD,CACET,UAAU,aACVF,MAAM,MACNY,OAAO,QACPC,YAAY,iCACZC,KAAK,OACLC,MAAM,UACNC,KAAK,QACLC,OAAQR,KAAKQ,OACbP,SAAU,SAACb,EAAOF,GAAR,OAAkB,EAAKG,iBAAiBD,EAAOF,IACzDuB,SAAU,GACVC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBxB,MAAOY,KAAKhC,MAAMC,KAClB4C,WAAY,CACVC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,iBAAiB,EACjBC,QAAS,KAEb,kBAAC,IAAD,CACEzB,UAAU,aACVF,MAAM,MACNY,OAAO,QACPC,YAAY,gCACZC,KAAK,OACLC,MAAM,UACNC,KAAK,QACLY,UAAU,EACVX,OAAQR,KAAKQ,OACbP,SAAUD,KAAKC,SACfQ,SAAU,GACVC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBxB,MAAOY,KAAKhC,MAAMM,QAClBuC,WAAY,CACVC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,iBAAiB,EACjBC,QAAS,Y,GA7HFE,aAsIRC,EA9If,WACE,OACE,yBAAK5B,UAAU,WACb,kBAAC,EAAD,QCFc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.8000ccf7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Form } from 'semantic-ui-react'\nimport './App.css';\nimport 'jsoneditor-react/es/editor.min.css';\n\nimport { MPSnippets } from '@mparticle/data-planning-snippets'\nimport { DataPlanMatchType } from '@mparticle/data-planning-models';\nimport AceEditor from 'react-ace'\nimport 'ace-builds/src-noconflict/mode-json'\nimport 'ace-builds/src-noconflict/theme-monokai'\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <DemoForm />\n    </div>\n  );\n}\n\nclass DemoForm extends Component {\n  state = {\n    json: '',\n    eventType: DataPlanMatchType.CustomEvent,\n    language: 'swift',\n    content: ''\n  }\n\n  handleClick = () => {\n    const { language, json } = this.state;\n    var currentLanguage = 1\n    if (language === 'swift') {\n      currentLanguage = 2\n    } else if (language === 'objC') {\n      currentLanguage = 3\n    } else if (language === 'kotlin') {\n      currentLanguage = 4\n    } else if (language === 'java') {\n      currentLanguage = 5\n    } else if (language === 'javascript') {\n      currentLanguage = 6\n    }\n\n    var content;\n    try {\n      content = MPSnippets.translateDataPlanJSON(JSON.parse(json), currentLanguage);\n    } catch (e) {\n      content = 'There is something wrong with your JSON';\n      console.log(e)\n    }\n    console.log(content)\n\n    this.setState(state => ({\n      content\n    }));\n  }\n\n  handleLanguageChange = (event) => {\n    this.setState({ language: event.target.value }, () => {\n      this.handleClick();\n    })\n  }\n\n  handleJSONChange = (value, event) => {\n    this.setState({ json: value }, () => {\n      this.handleClick();\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <div>\n            <img src=\"https://static.mparticle.com/sdk/mp_logo_black.svg\" width={280} alt=\"mParticle\" />\n            <a className=\"github\" href=\"https://github.com/mParticle/data-planning-snippets\" target=\"_blank\">\n              <img src=\"https://github.githubassets.com/images/modules/logos_page/Octocat.png\" width={150} alt=\"Checkout our repository on Github\" />\n            </a>\n            <p />\n            mParticle Snippets combines your data plan with example data generators, allowing users to generate mParticle events that conforms to your data plan.\n          </div>\n          <div>\n            <a className=\"icons\" href=\"https://www.npmjs.com/package/@mparticle/data-planning-snippets\" target=\"_blank\">\n              <img className=\"mr\" src=\"https://img.shields.io/npm/v/@mparticle/data-planning-snippets.svg?maxAge=2592000\" />\n            </a>\n            <a className=\"icons\" href=\"https://travis-ci.com/mParticle/data-planning-snippets\" target=\"_blank\">\n              <img className=\"mr\" src=\"https://travis-ci.com/mParticle/data-planning-snippets.svg?branch=master\" />\n            </a>\n          </div>\n        </div >\n        <Form className=\"form\" >\n          <Form.Group>\n            <Form.Field label='Please select a language' control='select' value={this.state.language} onChange={(e) => this.handleLanguageChange(e)}>\n              <option value='json'>JSON</option>\n              <option value='swift'>Swift</option>\n              <option value='objC'>Objective C</option>\n              <option value='kotlin'>Kotlin</option>\n              <option value='java'>Java</option>\n              <option value='javascript'>Javascript</option>\n            </Form.Field>\n          </Form.Group>\n          <Form.Group widths='equal'>\n            <AceEditor\n              className=\"jsonEditor\"\n              width=\"50%\"\n              height=\"800px\"\n              placeholder=\"Paste your Data Plan JSON here\"\n              mode=\"json\"\n              theme=\"monokai\"\n              name=\"blah1\"\n              onLoad={this.onLoad}\n              onChange={(value, event) => this.handleJSONChange(value, event)}\n              fontSize={14}\n              showPrintMargin={false}\n              showGutter={true}\n              highlightActiveLine={true}\n              value={this.state.json}\n              setOptions={{\n                enableBasicAutocompletion: false,\n                enableLiveAutocompletion: false,\n                enableSnippets: false,\n                showLineNumbers: true,\n                tabSize: 2,\n              }} />\n            <AceEditor\n              className=\"jsonEditor\"\n              width=\"50%\"\n              height=\"800px\"\n              placeholder=\"Example code will appear here\"\n              mode=\"json\"\n              theme=\"monokai\"\n              name=\"blah2\"\n              readOnly={true}\n              onLoad={this.onLoad}\n              onChange={this.onChange}\n              fontSize={14}\n              showPrintMargin={false}\n              showGutter={true}\n              highlightActiveLine={true}\n              value={this.state.content}\n              setOptions={{\n                enableBasicAutocompletion: false,\n                enableLiveAutocompletion: false,\n                enableSnippets: false,\n                showLineNumbers: true,\n                tabSize: 2,\n              }} />\n          </Form.Group>\n        </Form >\n      </div >\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}