{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DemoForm","json","initialPlan","navigation","validator","definition","type","DataPlanValidatorType","JSONSchema","match","DataPlanMatchType","CustomEvent","dataPlanPoint","resultString","MPSnippets","createSnippet","state","eventType","language","content","handleClick","localDataPlanPoint","currentLanguage","setState","handleLanguageChange","event","target","value","handleTypeChange","handleJSONChange","Form","Group","Field","label","control","this","onChange","e","ScreenView","UserAttributes","Container","className","mode","Button","onClick","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sxHAmBMA,E,2MACJC,KAAOC,IAAyBC,W,EAChCC,UAAY,CAAEC,WAAY,EAAKJ,KAAMK,KAAMC,wBAAsBC,Y,EACjEC,MAAQ,CAAEH,KAAMI,oBAAkBC,a,EAClCC,cAAgB,CAAER,UAAW,EAAKA,UAAWK,MAAO,EAAKA,O,EAEzDI,aAAeC,aAAWC,cAAc,EAAKH,cAAe,G,EAE5DI,MAAQ,CACNf,KAAM,EAAKA,KACXgB,UAAWP,oBAAkBC,YAC7BO,SAAU,QACVC,QAAS,EAAKN,c,EAGhBO,YAAc,WACZ,IAEMC,EAAqB,CAAEjB,UAFZ,CAAEC,WAAY,EAAKW,MAAMf,KAAMK,KAAMC,wBAAsBC,YAE1BC,MAD/B,CAAEH,KAAM,EAAKU,MAAMC,YAElCK,EAAkB,EACM,UAAxB,EAAKN,MAAME,SACbI,EAAkB,EACe,SAAxB,EAAKN,MAAME,WACpBI,EAAkB,GAGpB,EAAKC,UAAS,SAAAP,GAAK,MAAK,CACtBG,QAASL,aAAWC,cAAcM,EAAoBC,Q,EAI1DE,qBAAuB,SAACC,GACtB,EAAKF,SAAL,eACK,EAAKP,MADV,CAEEE,SAAUO,EAAMC,OAAOC,U,EAI3BC,iBAAmB,SAACH,GAClB,EAAKF,SAAL,eACK,EAAKP,MADV,CAEEC,UAAWQ,EAAMC,OAAOC,U,EAI5BE,iBAAmB,SAACJ,GAClB,EAAKF,UAAS,SAAAP,GAAK,MAAK,CACtBf,KAAMwB,O,wEAIA,IAAD,OACP,OACE,kBAACK,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYC,MAAM,2BAA2BC,QAAQ,SAASP,MAAOQ,KAAKnB,MAAME,SAAUkB,SAAU,SAACC,GAAD,OAAO,EAAKb,qBAAqBa,KACnI,4BAAQV,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,gBAEF,kBAACG,EAAA,EAAKE,MAAN,CAAYC,MAAM,qBAAqBC,QAAQ,SAASP,MAAOQ,KAAKnB,MAAME,SAAUkB,SAAU,SAACC,GAAD,OAAO,EAAKT,iBAAiBS,KACzH,4BAAQV,MAAOjB,oBAAkBC,aAAjC,gBACA,4BAAQgB,MAAOjB,oBAAkB4B,YAAjC,qBACA,4BAAQX,MAAOjB,oBAAkB6B,gBAAjC,0BAGJ,kBAACT,EAAA,EAAKC,MAAN,KACE,kBAACS,EAAA,EAAD,CAAWC,UAAU,kBACnB,kBAAC,IAAD,CACEA,UAAU,UACVd,MAAOQ,KAAKnB,MAAMf,KAClBmC,SAAU,SAACC,GAAD,OAAO,EAAKR,iBAAiBQ,IACvCK,KAAK,UAIT,kBAAC,IAAD,CAAWD,UAAU,UAAUvB,SAAS,QACrCiB,KAAKnB,MAAMG,UAGhB,kBAACW,EAAA,EAAKa,OAAN,CAAaC,QAAST,KAAKf,aAA3B,kB,GAhFeyB,aAsFRC,EA9Ff,WACE,OACE,yBAAKL,UAAU,WACb,kBAAC,EAAD,QCFcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzC,MACvB,2DCZN0C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ce704594.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Container } from 'semantic-ui-react'\nimport './App.css';\nimport { JsonEditor } from 'jsoneditor-react';\nimport 'jsoneditor-react/es/editor.min.css';\nimport Highlight from 'react-highlight.js';\nimport * as initialPlan from './initial-plan'\n\nimport { MPSnippets } from '@mparticle/data-planning-snippets'\nimport { DataPlanValidatorType, DataPlanMatchType } from '@mparticle/data-planning-models';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <DemoForm />\n    </div>\n  );\n}\n\nclass DemoForm extends Component {\n  json = initialPlan.custom_event.navigation\n  validator = { definition: this.json, type: DataPlanValidatorType.JSONSchema }\n  match = { type: DataPlanMatchType.CustomEvent }\n  dataPlanPoint = { validator: this.validator, match: this.match }\n\n  resultString = MPSnippets.createSnippet(this.dataPlanPoint, 2)\n\n  state = {\n    json: this.json,\n    eventType: DataPlanMatchType.CustomEvent,\n    language: 'swift',\n    content: this.resultString\n  }\n\n  handleClick = () => {\n    const localVal = { definition: this.state.json, type: DataPlanValidatorType.JSONSchema }\n    const localMatch = { type: this.state.eventType }\n    const localDataPlanPoint = { validator: localVal, match: localMatch }\n    var currentLanguage = 1\n    if (this.state.language === 'swift') {\n      currentLanguage = 2\n    } else if (this.state.language === 'objC') {\n      currentLanguage = 3\n    }\n\n    this.setState(state => ({\n      content: MPSnippets.createSnippet(localDataPlanPoint, currentLanguage)\n    }));\n  }\n\n  handleLanguageChange = (event) => {\n    this.setState({\n      ...this.state,\n      language: event.target.value,\n    })\n  }\n\n  handleTypeChange = (event) => {\n    this.setState({\n      ...this.state,\n      eventType: event.target.value,\n    })\n  }\n\n  handleJSONChange = (event) => {\n    this.setState(state => ({\n      json: event\n    }));\n  }\n\n  render() {\n    return (\n      <Form>\n        <Form.Group>\n          <Form.Field label='Please select a language' control='select' value={this.state.language} onChange={(e) => this.handleLanguageChange(e)}>\n            <option value='json'>JSON</option>\n            <option value='swift'>Swift</option>\n            <option value='objC'>Objective C</option>\n          </Form.Field>\n          <Form.Field label='and the event type' control='select' value={this.state.language} onChange={(e) => this.handleTypeChange(e)}>\n            <option value={DataPlanMatchType.CustomEvent}>Custom Event</option>\n            <option value={DataPlanMatchType.ScreenView}>Screen View Event</option>\n            <option value={DataPlanMatchType.UserAttributes}>User Attribute Event</option>\n          </Form.Field>\n        </Form.Group>\n        <Form.Group>\n          <Container className=\"jsonEditorForm\">\n            <JsonEditor\n              className=\"results\"\n              value={this.state.json}\n              onChange={(e) => this.handleJSONChange(e)}\n              mode=\"code\"\n            //maxRows=\"100\"\n            />\n          </Container>\n          <Highlight className=\"results\" language='bash'>\n            {this.state.content}\n          </Highlight>\n        </Form.Group>\n        <Form.Button onClick={this.handleClick}>Translate</Form.Button>\n      </Form >\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}